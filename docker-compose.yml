version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pygorp_postgres
    environment:
      POSTGRES_DB: pygorp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pygorp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pygorp_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pygorp.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - pygorp_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: pygorp_redis
    ports:
      - "6379:6379"
    networks:
      - pygorp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pygorp_backend
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: pygorp
      DB_SSLMODE: disable
      PORT: 8080
      GIN_MODE: release
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pygorp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: pygorp_ai_service
    ports:
      - "8000:8000"
    environment:
      HOST: 0.0.0.0
      PORT: 8000
    depends_on:
      - backend
    networks:
      - pygorp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pygorp_frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8080/api/v1
      NEXT_PUBLIC_AI_SERVICE_URL: http://ai-service:8000
    depends_on:
      - backend
      - ai-service
    networks:
      - pygorp_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  pygorp_network:
    driver: bridge
